// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dimocks

import (
	"github.com/jackc/pgx/v5/pgxpool"
	mock "github.com/stretchr/testify/mock"
)

// NewDI creates a new instance of DI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DI {
	mock := &DI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DI is an autogenerated mock type for the DI type
type DI struct {
	mock.Mock
}

type DI_Expecter struct {
	mock *mock.Mock
}

func (_m *DI) EXPECT() *DI_Expecter {
	return &DI_Expecter{mock: &_m.Mock}
}

// ProvidePostgres provides a mock function for the type DI
func (_mock *DI) ProvidePostgres() *pgxpool.Pool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProvidePostgres")
	}

	var r0 *pgxpool.Pool
	if returnFunc, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}
	return r0
}

// DI_ProvidePostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvidePostgres'
type DI_ProvidePostgres_Call struct {
	*mock.Call
}

// ProvidePostgres is a helper method to define mock.On call
func (_e *DI_Expecter) ProvidePostgres() *DI_ProvidePostgres_Call {
	return &DI_ProvidePostgres_Call{Call: _e.mock.On("ProvidePostgres")}
}

func (_c *DI_ProvidePostgres_Call) Run(run func()) *DI_ProvidePostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DI_ProvidePostgres_Call) Return(pool *pgxpool.Pool) *DI_ProvidePostgres_Call {
	_c.Call.Return(pool)
	return _c
}

func (_c *DI_ProvidePostgres_Call) RunAndReturn(run func() *pgxpool.Pool) *DI_ProvidePostgres_Call {
	_c.Call.Return(run)
	return _c
}
