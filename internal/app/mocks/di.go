// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package appmocks

import (
	"net/http"

	"github.com/folder-app/internal/app/api/http/v1"
	"github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// NewDI creates a new instance of DI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DI {
	mock := &DI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DI is an autogenerated mock type for the DI type
type DI struct {
	mock.Mock
}

type DI_Expecter struct {
	mock *mock.Mock
}

func (_m *DI) EXPECT() *DI_Expecter {
	return &DI_Expecter{mock: &_m.Mock}
}

// ProvideFoldersUsecase provides a mock function for the type DI
func (_mock *DI) ProvideFoldersUsecase() v1.Usecase {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProvideFoldersUsecase")
	}

	var r0 v1.Usecase
	if returnFunc, ok := ret.Get(0).(func() v1.Usecase); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Usecase)
		}
	}
	return r0
}

// DI_ProvideFoldersUsecase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvideFoldersUsecase'
type DI_ProvideFoldersUsecase_Call struct {
	*mock.Call
}

// ProvideFoldersUsecase is a helper method to define mock.On call
func (_e *DI_Expecter) ProvideFoldersUsecase() *DI_ProvideFoldersUsecase_Call {
	return &DI_ProvideFoldersUsecase_Call{Call: _e.mock.On("ProvideFoldersUsecase")}
}

func (_c *DI_ProvideFoldersUsecase_Call) Run(run func()) *DI_ProvideFoldersUsecase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DI_ProvideFoldersUsecase_Call) Return(usecase v1.Usecase) *DI_ProvideFoldersUsecase_Call {
	_c.Call.Return(usecase)
	return _c
}

func (_c *DI_ProvideFoldersUsecase_Call) RunAndReturn(run func() v1.Usecase) *DI_ProvideFoldersUsecase_Call {
	_c.Call.Return(run)
	return _c
}

// ProvideHTTPMux provides a mock function for the type DI
func (_mock *DI) ProvideHTTPMux() *http.ServeMux {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProvideHTTPMux")
	}

	var r0 *http.ServeMux
	if returnFunc, ok := ret.Get(0).(func() *http.ServeMux); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.ServeMux)
		}
	}
	return r0
}

// DI_ProvideHTTPMux_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvideHTTPMux'
type DI_ProvideHTTPMux_Call struct {
	*mock.Call
}

// ProvideHTTPMux is a helper method to define mock.On call
func (_e *DI_Expecter) ProvideHTTPMux() *DI_ProvideHTTPMux_Call {
	return &DI_ProvideHTTPMux_Call{Call: _e.mock.On("ProvideHTTPMux")}
}

func (_c *DI_ProvideHTTPMux_Call) Run(run func()) *DI_ProvideHTTPMux_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DI_ProvideHTTPMux_Call) Return(serveMux *http.ServeMux) *DI_ProvideHTTPMux_Call {
	_c.Call.Return(serveMux)
	return _c
}

func (_c *DI_ProvideHTTPMux_Call) RunAndReturn(run func() *http.ServeMux) *DI_ProvideHTTPMux_Call {
	_c.Call.Return(run)
	return _c
}

// ProvideHTTPServer provides a mock function for the type DI
func (_mock *DI) ProvideHTTPServer() *http.Server {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProvideHTTPServer")
	}

	var r0 *http.Server
	if returnFunc, ok := ret.Get(0).(func() *http.Server); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Server)
		}
	}
	return r0
}

// DI_ProvideHTTPServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvideHTTPServer'
type DI_ProvideHTTPServer_Call struct {
	*mock.Call
}

// ProvideHTTPServer is a helper method to define mock.On call
func (_e *DI_Expecter) ProvideHTTPServer() *DI_ProvideHTTPServer_Call {
	return &DI_ProvideHTTPServer_Call{Call: _e.mock.On("ProvideHTTPServer")}
}

func (_c *DI_ProvideHTTPServer_Call) Run(run func()) *DI_ProvideHTTPServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DI_ProvideHTTPServer_Call) Return(server *http.Server) *DI_ProvideHTTPServer_Call {
	_c.Call.Return(server)
	return _c
}

func (_c *DI_ProvideHTTPServer_Call) RunAndReturn(run func() *http.Server) *DI_ProvideHTTPServer_Call {
	_c.Call.Return(run)
	return _c
}

// ProvideLogger provides a mock function for the type DI
func (_mock *DI) ProvideLogger() *zerolog.Logger {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProvideLogger")
	}

	var r0 *zerolog.Logger
	if returnFunc, ok := ret.Get(0).(func() *zerolog.Logger); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Logger)
		}
	}
	return r0
}

// DI_ProvideLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvideLogger'
type DI_ProvideLogger_Call struct {
	*mock.Call
}

// ProvideLogger is a helper method to define mock.On call
func (_e *DI_Expecter) ProvideLogger() *DI_ProvideLogger_Call {
	return &DI_ProvideLogger_Call{Call: _e.mock.On("ProvideLogger")}
}

func (_c *DI_ProvideLogger_Call) Run(run func()) *DI_ProvideLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DI_ProvideLogger_Call) Return(logger *zerolog.Logger) *DI_ProvideLogger_Call {
	_c.Call.Return(logger)
	return _c
}

func (_c *DI_ProvideLogger_Call) RunAndReturn(run func() *zerolog.Logger) *DI_ProvideLogger_Call {
	_c.Call.Return(run)
	return _c
}
